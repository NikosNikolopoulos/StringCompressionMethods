
/**
 * Static Huffman class.
 * @author Nikos Nikolopoulos
 * @version 09/12/2018
 */
import java.util.PriorityQueue; 
import java.util.Scanner; 
public class StaticHuffman 
{ 
    // Recursive function to print the 
    // huffman-code through the tree traversal. 
    // Here s is the huffman - code generated. 
    public static void printCode(HuffmanNode root, String s) 
    { 
  
        // Base case: if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left == null && root.right == null && Character.isLetter(root.c)) 
        { 
            // c is the character in the node 
            System.out.println(root.c + ":" + s); 
            return; 
        } 
  
        // If we go to left then add "0" to the code. 
        // If we go to the right add "1" to the code. 
  
        // Recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0"); 
        printCode(root.right, s + "1"); 
    } 
    // Encoding method.
    /**
    * Sample client that encodes the given pair charArray & charfreq according to Huffman algorithm with MinPQ
    * @param charArray: An array containing our alphabet.
    *        charfreq : An array containing the frequencies of our characters.
    * Try the examples bellow as input:
    * charArray = { 'a', 'b', 'c', 'd', 'e', 'f' }
    * charfreq  = { 5, 9, 12, 13, 16, 45 }
    */
    public static void encode(char[] charArray,int[] charfreq) 
    { 
        Scanner s = new Scanner(System.in); 
  
        // Number of characters. 
        int n = charArray.length; 
        
        // Creates a priority queue(min-heap). 
        PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator()); 
  
        for (int i = 0; i < n; i++) 
        { 
  
            // Creating a huffman node object 
            // and inserting it into the priority-queue. 
            HuffmanNode hn = new HuffmanNode(); 
  
            hn.c = charArray[i]; 
            hn.data = charfreq[i]; 
  
            hn.left = null; 
            hn.right = null; 
            // add functions adds 
            // the huffman node to the queue. 
            q.add(hn); 
        } 
  
        // create a root node 
        HuffmanNode root = null; 
  
        // Here we will extract the two minimum value 
        // from the heap each time until 
        // its size reduces to 1, extract until 
        // all the nodes are extracted. 
        while (q.size() > 1) 
        { 
  
            // Extract (fisrt) minimum. 
            HuffmanNode x = q.peek(); 
            q.poll(); 
  
            // Extract (second) minimum. 
            HuffmanNode y = q.peek(); 
            q.poll(); 
  
            // New node f which has data field equal 
            HuffmanNode f = new HuffmanNode(); 
  
            // to the sum of the frequencies of the two nodes.
            f.data = x.data + y.data; 
            f.c = '-'; 
            // First extracted node as left child. 
            f.left = x; 
  
            // Second extracted node as the right child. 
            f.right = y; 
  
            // Marking f the root node. 
            root = f; 
  
            // Add this node to the priority-queue. 
            q.add(f); 
        } 
  
        // Print the codes by traversing the tree.
        printCode(root, ""); 
    } 
    // Decoding method.
    public static void decode(String S ,HuffmanNode root)
    {
        if (root == null) 
            return;
        StringBuilder sb = new StringBuilder();
        int pos = 0;
        HuffmanNode current = root;
        char[] chars = S.toCharArray();
        while (pos < chars.length) 
        {
            char c = chars[pos];
            if (c == '0' && current.left != null) 
                current = current.left;
            
            else if (c == '1' && current.right != null) 
                current = current.right;
            
            if (current.left == null && current.right == null) 
            {
                sb.append(current.c);
                current = root;
            }
            pos++;
        }
        System.out.print(sb.toString());
    }
} 
